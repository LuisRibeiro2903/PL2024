Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    and
    not

Grammar

Rule 0     S' -> prg
Rule 1     prg -> atribs
Rule 2     atribs -> atrib
Rule 3     atribs -> atribs atrib
Rule 4     atrib -> id = expCond
Rule 5     expCond -> exp
Rule 6     expCond -> exp = = exp
Rule 7     exp -> term
Rule 8     exp -> exp + term
Rule 9     exp -> exp or term
Rule 10    term -> fact
Rule 11    term -> term * fact
Rule 12    fact -> number
Rule 13    fact -> ( expCond )
Rule 14    fact -> id

Terminals, with rules where they appear

(                    : 13
)                    : 13
*                    : 11
+                    : 8
=                    : 4 6 6
and                  : 
error                : 
id                   : 4 14
not                  : 
number               : 12
or                   : 9

Nonterminals, with rules where they appear

atrib                : 2 3
atribs               : 1 3
exp                  : 5 6 6 8 9
expCond              : 4 13
fact                 : 10 11
prg                  : 0
term                 : 7 8 9 11

Parsing method: LALR

state 0

    (0) S' -> . prg
    (1) prg -> . atribs
    (2) atribs -> . atrib
    (3) atribs -> . atribs atrib
    (4) atrib -> . id = expCond

    id              shift and go to state 4

    prg                            shift and go to state 1
    atribs                         shift and go to state 2
    atrib                          shift and go to state 3

state 1

    (0) S' -> prg .



state 2

    (1) prg -> atribs .
    (3) atribs -> atribs . atrib
    (4) atrib -> . id = expCond

    $end            reduce using rule 1 (prg -> atribs .)
    id              shift and go to state 4

    atrib                          shift and go to state 5

state 3

    (2) atribs -> atrib .

    id              reduce using rule 2 (atribs -> atrib .)
    $end            reduce using rule 2 (atribs -> atrib .)


state 4

    (4) atrib -> id . = expCond

    =               shift and go to state 6


state 5

    (3) atribs -> atribs atrib .

    id              reduce using rule 3 (atribs -> atribs atrib .)
    $end            reduce using rule 3 (atribs -> atribs atrib .)


state 6

    (4) atrib -> id = . expCond
    (5) expCond -> . exp
    (6) expCond -> . exp = = exp
    (7) exp -> . term
    (8) exp -> . exp + term
    (9) exp -> . exp or term
    (10) term -> . fact
    (11) term -> . term * fact
    (12) fact -> . number
    (13) fact -> . ( expCond )
    (14) fact -> . id

    number          shift and go to state 12
    (               shift and go to state 13
    id              shift and go to state 7

    expCond                        shift and go to state 8
    exp                            shift and go to state 9
    term                           shift and go to state 10
    fact                           shift and go to state 11

state 7

    (14) fact -> id .

    *               reduce using rule 14 (fact -> id .)
    =               reduce using rule 14 (fact -> id .)
    +               reduce using rule 14 (fact -> id .)
    or              reduce using rule 14 (fact -> id .)
    id              reduce using rule 14 (fact -> id .)
    $end            reduce using rule 14 (fact -> id .)
    )               reduce using rule 14 (fact -> id .)


state 8

    (4) atrib -> id = expCond .

    id              reduce using rule 4 (atrib -> id = expCond .)
    $end            reduce using rule 4 (atrib -> id = expCond .)


state 9

    (5) expCond -> exp .
    (6) expCond -> exp . = = exp
    (8) exp -> exp . + term
    (9) exp -> exp . or term

    id              reduce using rule 5 (expCond -> exp .)
    $end            reduce using rule 5 (expCond -> exp .)
    )               reduce using rule 5 (expCond -> exp .)
    =               shift and go to state 14
    +               shift and go to state 15
    or              shift and go to state 16


state 10

    (7) exp -> term .
    (11) term -> term . * fact

    =               reduce using rule 7 (exp -> term .)
    +               reduce using rule 7 (exp -> term .)
    or              reduce using rule 7 (exp -> term .)
    id              reduce using rule 7 (exp -> term .)
    $end            reduce using rule 7 (exp -> term .)
    )               reduce using rule 7 (exp -> term .)
    *               shift and go to state 17


state 11

    (10) term -> fact .

    *               reduce using rule 10 (term -> fact .)
    =               reduce using rule 10 (term -> fact .)
    +               reduce using rule 10 (term -> fact .)
    or              reduce using rule 10 (term -> fact .)
    id              reduce using rule 10 (term -> fact .)
    $end            reduce using rule 10 (term -> fact .)
    )               reduce using rule 10 (term -> fact .)


state 12

    (12) fact -> number .

    *               reduce using rule 12 (fact -> number .)
    =               reduce using rule 12 (fact -> number .)
    +               reduce using rule 12 (fact -> number .)
    or              reduce using rule 12 (fact -> number .)
    id              reduce using rule 12 (fact -> number .)
    $end            reduce using rule 12 (fact -> number .)
    )               reduce using rule 12 (fact -> number .)


state 13

    (13) fact -> ( . expCond )
    (5) expCond -> . exp
    (6) expCond -> . exp = = exp
    (7) exp -> . term
    (8) exp -> . exp + term
    (9) exp -> . exp or term
    (10) term -> . fact
    (11) term -> . term * fact
    (12) fact -> . number
    (13) fact -> . ( expCond )
    (14) fact -> . id

    number          shift and go to state 12
    (               shift and go to state 13
    id              shift and go to state 7

    expCond                        shift and go to state 18
    exp                            shift and go to state 9
    term                           shift and go to state 10
    fact                           shift and go to state 11

state 14

    (6) expCond -> exp = . = exp

    =               shift and go to state 19


state 15

    (8) exp -> exp + . term
    (10) term -> . fact
    (11) term -> . term * fact
    (12) fact -> . number
    (13) fact -> . ( expCond )
    (14) fact -> . id

    number          shift and go to state 12
    (               shift and go to state 13
    id              shift and go to state 7

    term                           shift and go to state 20
    fact                           shift and go to state 11

state 16

    (9) exp -> exp or . term
    (10) term -> . fact
    (11) term -> . term * fact
    (12) fact -> . number
    (13) fact -> . ( expCond )
    (14) fact -> . id

    number          shift and go to state 12
    (               shift and go to state 13
    id              shift and go to state 7

    term                           shift and go to state 21
    fact                           shift and go to state 11

state 17

    (11) term -> term * . fact
    (12) fact -> . number
    (13) fact -> . ( expCond )
    (14) fact -> . id

    number          shift and go to state 12
    (               shift and go to state 13
    id              shift and go to state 7

    fact                           shift and go to state 22

state 18

    (13) fact -> ( expCond . )

    )               shift and go to state 23


state 19

    (6) expCond -> exp = = . exp
    (7) exp -> . term
    (8) exp -> . exp + term
    (9) exp -> . exp or term
    (10) term -> . fact
    (11) term -> . term * fact
    (12) fact -> . number
    (13) fact -> . ( expCond )
    (14) fact -> . id

    number          shift and go to state 12
    (               shift and go to state 13
    id              shift and go to state 7

    exp                            shift and go to state 24
    term                           shift and go to state 10
    fact                           shift and go to state 11

state 20

    (8) exp -> exp + term .
    (11) term -> term . * fact

    =               reduce using rule 8 (exp -> exp + term .)
    +               reduce using rule 8 (exp -> exp + term .)
    or              reduce using rule 8 (exp -> exp + term .)
    id              reduce using rule 8 (exp -> exp + term .)
    $end            reduce using rule 8 (exp -> exp + term .)
    )               reduce using rule 8 (exp -> exp + term .)
    *               shift and go to state 17


state 21

    (9) exp -> exp or term .
    (11) term -> term . * fact

    =               reduce using rule 9 (exp -> exp or term .)
    +               reduce using rule 9 (exp -> exp or term .)
    or              reduce using rule 9 (exp -> exp or term .)
    id              reduce using rule 9 (exp -> exp or term .)
    $end            reduce using rule 9 (exp -> exp or term .)
    )               reduce using rule 9 (exp -> exp or term .)
    *               shift and go to state 17


state 22

    (11) term -> term * fact .

    *               reduce using rule 11 (term -> term * fact .)
    =               reduce using rule 11 (term -> term * fact .)
    +               reduce using rule 11 (term -> term * fact .)
    or              reduce using rule 11 (term -> term * fact .)
    id              reduce using rule 11 (term -> term * fact .)
    $end            reduce using rule 11 (term -> term * fact .)
    )               reduce using rule 11 (term -> term * fact .)


state 23

    (13) fact -> ( expCond ) .

    *               reduce using rule 13 (fact -> ( expCond ) .)
    =               reduce using rule 13 (fact -> ( expCond ) .)
    +               reduce using rule 13 (fact -> ( expCond ) .)
    or              reduce using rule 13 (fact -> ( expCond ) .)
    id              reduce using rule 13 (fact -> ( expCond ) .)
    $end            reduce using rule 13 (fact -> ( expCond ) .)
    )               reduce using rule 13 (fact -> ( expCond ) .)


state 24

    (6) expCond -> exp = = exp .
    (8) exp -> exp . + term
    (9) exp -> exp . or term

    id              reduce using rule 6 (expCond -> exp = = exp .)
    $end            reduce using rule 6 (expCond -> exp = = exp .)
    )               reduce using rule 6 (expCond -> exp = = exp .)
    +               shift and go to state 15
    or              shift and go to state 16

